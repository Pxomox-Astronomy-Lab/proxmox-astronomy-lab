# Milvus Vector Database Platform - Docker Compose Configuration
# Enterprise-grade vector database with Attu web interface and backup systems
# Documentation: See README.md for complete setup and configuration guide

version: '3.8'

# ==============================================================================
# NETWORK CONFIGURATION
# ==============================================================================
networks:
  milvus:
    driver: ${NETWORK_DRIVER:-bridge}
    name: ${MILVUS_NETWORK_NAME:-milvus}

# ==============================================================================
# VOLUME CONFIGURATION
# ==============================================================================
volumes:
  etcd_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd
  milvus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio
  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/backup

# ==============================================================================
# SERVICE DEFINITIONS
# ==============================================================================
services:

  # ============================================================================
  # ETCD COORDINATION SERVICE
  # ============================================================================
  etcd:
    container_name: milvus-etcd
    image: ${ETCD_IMAGE_VERSION:-quay.io/coreos/etcd:v3.5.18}
    environment:
      - ETCD_AUTO_COMPACTION_MODE=${ETCD_AUTO_COMPACTION_MODE:-revision}
      - ETCD_AUTO_COMPACTION_RETENTION=${ETCD_AUTO_COMPACTION_RETENTION:-1000}
      - ETCD_QUOTA_BACKEND_BYTES=${ETCD_QUOTA_BACKEND_BYTES:-4294967296}
      - ETCD_SNAPSHOT_COUNT=${ETCD_SNAPSHOT_COUNT:-50000}
      - TZ=${TZ:-UTC}
    volumes:
      - etcd_data:/etcd
    command: etcd -advertise-client-urls=http://etcd:${ETCD_CLIENT_PORT:-2379} -listen-client-urls http://0.0.0.0:${ETCD_CLIENT_PORT:-2379} --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: ${HEALTH_CHECK_INTERVAL:-30}s
      timeout: ${HEALTH_CHECK_TIMEOUT:-20}s
      retries: ${HEALTH_CHECK_RETRIES:-3}
    restart: ${RESTART_POLICY:-unless-stopped}
    networks:
      - milvus
    logging:
      driver: ${LOG_DRIVER:-json-file}
      options:
        max-size: ${LOG_MAX_SIZE:-100m}
        max-file: ${LOG_MAX_FILE:-3}
    # Uncomment for resource limits
    # deploy:
    #   resources:
    #     limits:
    #       memory: ${ETCD_MEMORY_LIMIT:-2g}
    #       cpus: ${ETCD_CPU_LIMIT:-1.0}

  # ============================================================================
  # MINIO OBJECT STORAGE SERVICE
  # ============================================================================
  minio:
    container_name: milvus-minio
    image: ${MINIO_IMAGE_VERSION:-minio/minio:RELEASE.2024-05-28T17-19-04Z}
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - MINIO_REGION=${MINIO_REGION:-us-east-1}
      - TZ=${TZ:-UTC}
    ports:
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
      - "${MINIO_API_PORT:-9000}:9000"
    volumes:
      - minio_data:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: ${HEALTH_CHECK_INTERVAL:-30}s
      timeout: ${HEALTH_CHECK_TIMEOUT:-20}s
      retries: ${HEALTH_CHECK_RETRIES:-3}
    restart: ${RESTART_POLICY:-unless-stopped}
    networks:
      - milvus
    logging:
      driver: ${LOG_DRIVER:-json-file}
      options:
        max-size: ${LOG_MAX_SIZE:-100m}
        max-file: ${LOG_MAX_FILE:-3}
    # Uncomment for resource limits
    # deploy:
    #   resources:
    #     limits:
    #       memory: ${MINIO_MEMORY_LIMIT:-4g}
    #       cpus: ${MINIO_CPU_LIMIT:-2.0}

  # ============================================================================
  # MILVUS VECTOR DATABASE SERVICE
  # ============================================================================
  standalone:
    container_name: milvus-standalone
    image: ${MILVUS_IMAGE_VERSION:-milvusdb/milvus:v2.5.15}
    command: ["milvus", "run", "standalone"]
    security_opt:
      - ${CONTAINER_SECURITY_OPT:-seccomp:unconfined}
    environment:
      - MINIO_REGION=${MINIO_REGION:-us-east-1}
      - ETCD_ENDPOINTS=etcd:${ETCD_CLIENT_PORT:-2379}
      - MINIO_ADDRESS=minio:${MINIO_API_PORT:-9000}
      - MILVUS_STANDALONE_MEMORY_LIMIT=${MILVUS_STANDALONE_MEMORY_LIMIT:-16GiB}
      - TZ=${TZ:-UTC}
      # Optional development/debugging settings
      - MILVUS_LOG_LEVEL=${DEBUG_LOGGING:-info}
    volumes:
      - milvus_data:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${MILVUS_METRICS_PORT:-9091}/healthz"]
      interval: ${HEALTH_CHECK_INTERVAL:-30}s
      start_period: ${MILVUS_HEALTH_START_PERIOD:-90s}
      timeout: ${HEALTH_CHECK_TIMEOUT:-20}s
      retries: ${HEALTH_CHECK_RETRIES:-3}
    ports:
      - "${MILVUS_GRPC_PORT:-19530}:19530"  # Milvus gRPC port
      - "${MILVUS_METRICS_PORT:-9091}:9091" # Milvus metrics/health port
    depends_on:
      etcd:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: ${RESTART_POLICY:-unless-stopped}
    networks:
      - milvus
    logging:
      driver: ${LOG_DRIVER:-json-file}
      options:
        max-size: ${LOG_MAX_SIZE:-100m}
        max-file: ${LOG_MAX_FILE:-3}
    # Memory limit is controlled via environment variable MILVUS_STANDALONE_MEMORY_LIMIT

  # ============================================================================
  # ATTU WEB INTERFACE SERVICE
  # ============================================================================
  attu:
    container_name: milvus-attu
    image: ${ATTU_IMAGE_VERSION:-zilliz/attu:v2.4.11}
    environment:
      - MILVUS_URL=${ATTU_MILVUS_URL:-milvus-standalone:19530}
      - TZ=${TZ:-UTC}
    ports:
      - "${ATTU_WEB_PORT:-8000}:3000"
    depends_on:
      standalone:
        condition: service_healthy
    restart: ${RESTART_POLICY:-unless-stopped}
    networks:
      - milvus
    logging:
      driver: ${LOG_DRIVER:-json-file}
      options:
        max-size: ${LOG_MAX_SIZE:-100m}
        max-file: ${LOG_MAX_FILE:-3}
    # Uncomment for resource limits
    # deploy:
    #   resources:
    #     limits:
    #       memory: ${ATTU_MEMORY_LIMIT:-1g}
    #       cpus: ${ATTU_CPU_LIMIT:-0.5}

  # ============================================================================
  # MILVUS BACKUP SERVICE
  # ============================================================================
  milvus-backup:
    container_name: milvus-backup
    image: ${MILVUS_BACKUP_IMAGE_VERSION:-milvusdb/milvus-backup:v0.4.15}
    environment:
      - MINIO_ADDRESS=minio:${MINIO_API_PORT:-9000}
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY:-minioadmin}
      - MINIO_USE_SSL=${MINIO_USE_SSL:-false}
      - MILVUS_ADDRESS=${MILVUS_HOST:-milvus-standalone}:${MILVUS_GRPC_PORT:-19530}
      - BACKUP_BUCKET_NAME=${BACKUP_BUCKET_NAME:-milvus-backup}
      - BACKUP_ROOT_PATH=${BACKUP_ROOT_PATH:-backup}
      - TZ=${TZ:-UTC}
    volumes:
      - backup_data:/backup
      - ${DOCKER_VOLUME_DIRECTORY:-.}/config/backup.yaml:/etc/milvus-backup/backup.yaml:ro
    depends_on:
      standalone:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: "no"  # Only run when needed for backup operations
    networks:
      - milvus
    logging:
      driver: ${LOG_DRIVER:-json-file}
      options:
        max-size: ${LOG_MAX_SIZE:-100m}
        max-file: ${LOG_MAX_FILE:-3}
    # Uncomment for resource limits
    # deploy:
    #   resources:
    #     limits:
    #       memory: ${BACKUP_MEMORY_LIMIT:-2g}
    #       cpus: ${BACKUP_CPU_LIMIT:-1.0}

# ==============================================================================
# ADDITIONAL SERVICES (OPTIONAL)
# ==============================================================================

  # ============================================================================
  # MONITORING EXPORTER (OPTIONAL - Uncomment to enable)
  # ============================================================================
  # milvus-exporter:
  #   container_name: milvus-exporter
  #   image: milvusdb/milvus-exporter:latest
  #   environment:
  #     - MILVUS_ADDRESS=milvus-standalone:19530
  #     - TZ=${TZ:-UTC}
  #   ports:
  #     - "9092:9092"  # Prometheus metrics endpoint
  #   depends_on:
  #     standalone:
  #       condition: service_healthy
  #   restart: ${RESTART_POLICY:-unless-stopped}
  #   networks:
  #     - milvus
  #   logging:
  #     driver: ${LOG_DRIVER:-json-file}
  #     options:
  #       max-size: ${LOG_MAX_SIZE:-100m}
  #       max-file: ${LOG_MAX_FILE:-3}

# ==============================================================================
# CONFIGURATION NOTES
# ==============================================================================
# 
# 1. SECURITY CONSIDERATIONS:
#    - Change default MinIO credentials before production use
#    - Consider using Docker secrets for sensitive data
#    - Enable SSL/TLS for production deployments
#    - Implement proper network segmentation
#
# 2. PERFORMANCE TUNING:
#    - Adjust MILVUS_STANDALONE_MEMORY_LIMIT based on available resources
#    - Configure etcd performance parameters for your workload
#    - Monitor resource usage and adjust limits accordingly
#
# 3. BACKUP CONFIGURATION:
#    - Ensure backup.yaml is properly configured
#    - Test backup and restore procedures regularly
#    - Monitor backup storage capacity
#
# 4. MONITORING:
#    - Enable Prometheus metrics collection if needed
#    - Configure log aggregation for operational insights
#    - Set up alerting for service health and performance
#
# 5. VOLUME MANAGEMENT:
#    - Ensure sufficient disk space for vector data growth
#    - Implement proper backup of persistent volumes
#    - Consider using external storage for production
#
# ==============================================================================