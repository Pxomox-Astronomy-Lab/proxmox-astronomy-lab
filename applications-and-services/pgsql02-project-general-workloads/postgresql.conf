# ==============================================================================
# postgresql.conf for proj-pgsql02 - Secondary DESI Analysis Database
# ==============================================================================
#
# SERVER SPECIFICATIONS:
# - Hardware: 6 CPU cores, 24GB RAM, NVMe storage
# - Role: Secondary astronomical database for DESI cosmic void analysis
# - Workload: Heavy analytical queries, large dataset processing, concurrent analysis
# - Storage: High-performance NVMe at /mnt/data/pg_main
#
# PERFORMANCE OPTIMIZATIONS:
# - Memory allocation optimized for analytical workloads (~25% RAM to shared_buffers)
# - Parallel processing configured for 6-core system
# - WAL settings tuned for write-heavy ETL operations
# - Query planner optimized for NVMe storage (low random_page_cost)
# - Logging configured for performance monitoring and query optimization
#
# SECURITY & ACCESS:
# - Network access restricted to trusted subnets (10.25.x.x)
# - Authentication via scram-sha-256 for all network connections
# - Local access via peer authentication for administrative operations
#
# Last Updated: July 21, 2025
# Configuration Version: v2.0
# ==============================================================================

# ------------------------------------------------------------------------------
# CONNECTIONS AND AUTHENTICATION
# ------------------------------------------------------------------------------

listen_addresses = '*'                  # Listen on all network interfaces
port = 5432                             # Default PostgreSQL port
max_connections = 200                   # Support high concurrency for cluster workloads

# ------------------------------------------------------------------------------
# RESOURCE USAGE (MEMORY)
# Optimized for 6 cores, 24GB RAM, analytical workloads
# ------------------------------------------------------------------------------

# Data directory on high-performance NVMe storage
data_directory = '/mnt/data/pg_main'

# shared_buffers: ~25% of system RAM for optimal cache performance
# Allows substantial portion of working set to remain in memory
shared_buffers = 6GB

# effective_cache_size: ~75% of system RAM for query planner optimization
# Helps planner make intelligent decisions about index vs sequential scans
effective_cache_size = 18GB

# maintenance_work_mem: Memory for maintenance operations (VACUUM, CREATE INDEX)
# Critical for performance during data ingestion and index creation phases
maintenance_work_mem = 1.5GB

# work_mem: Memory per sort/hash operation before spilling to disk
# Benefits complex analytical queries with large joins and aggregations
# Conservative setting to handle multiple concurrent operations
work_mem = 192MB

# ------------------------------------------------------------------------------
# WRITE AHEAD LOG (WAL)
# Optimized for write-heavy ETL workloads with smooth I/O patterns
# ------------------------------------------------------------------------------

# wal_buffers: WAL memory buffer, -1 lets PostgreSQL choose optimal size
wal_buffers = -1

# WAL size limits: Larger values reduce checkpoint frequency, improving performance
# Sized appropriately for heavy data loading operations
min_wal_size = 1.5GB
max_wal_size = 6GB

# ------------------------------------------------------------------------------
# CHECKPOINTING
# Configured to spread I/O load and minimize performance impact
# ------------------------------------------------------------------------------

checkpoint_timeout = 15min              # Checkpoint interval
checkpoint_completion_target = 0.9      # Spread checkpoint I/O over 90% of interval

# ------------------------------------------------------------------------------
# WORKER PROCESSES
# Parallel processing optimized for 6-core system
# ------------------------------------------------------------------------------

max_worker_processes = 6                # Match available CPU cores
max_parallel_workers_per_gather = 3     # Half of cores for single query parallelism
max_parallel_maintenance_workers = 3    # Parallel maintenance operations
max_parallel_workers = 6                # Total system-wide parallel workers

# ------------------------------------------------------------------------------
# QUERY PLANNER (COSTING)
# Optimized for NVMe storage characteristics
# ------------------------------------------------------------------------------

# random_page_cost: Reflects NVMe's low seek penalty vs spinning disks
# Default 4.0 is for HDDs; NVMe has minimal random access penalty
random_page_cost = 1.1

# ------------------------------------------------------------------------------
# LOGGING AND MONITORING
# Comprehensive logging for performance analysis and troubleshooting
# ------------------------------------------------------------------------------

logging_collector = on
log_directory = 'log'
log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
log_min_duration_statement = 250ms      # Log slow queries for optimization
log_checkpoints = on                    # Monitor checkpoint performance
log_lock_waits = on                     # Identify concurrency issues
log_temp_files = 0                      # Monitor temp file usage for work_mem tuning
log_autovacuum_min_duration = 0         # Track autovacuum performance

# ------------------------------------------------------------------------------
# LOCALIZATION
# ------------------------------------------------------------------------------

timezone = 'UTC'                        # Standard UTC for astronomical data

# ------------------------------------------------------------------------------
# ADDITIONAL PERFORMANCE SETTINGS
# Fine-tuned for astronomical database workloads
# ------------------------------------------------------------------------------

# Enable just-in-time compilation for complex queries (PostgreSQL 11+)
jit = on

# Statistics collection for query optimization
default_statistics_target = 100         # Higher statistics for better query plans

# Increase timeout for long-running analytical queries
statement_timeout = 0                   # No timeout (careful with this setting)

# All other settings use PostgreSQL defaults unless specifically overridden above